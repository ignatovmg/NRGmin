#include <string.h>
#include <stdlib.h>
#include <getopt.h>

#include "parse_options.h"
#include "utils.h"


/**
 * Stringize "arg" find the dot, replace "-" with "_" and compare to "value"
 */
#define _FILL_PARAM(arg, value) do {                                   \
    char str_arg[] = #arg;                                             \
    char* dot_pos;                                                     \
    if ((dot_pos = strchr(str_arg, '.')) != NULL) {                    \
        dot_pos = dot_pos + 1;                                         \
    }                                                                  \
    if (strcmp(dot_pos, long_options[option_index].name) == 0) {       \
            (arg) = (value);                                           \
            break;                                                     \
    }                                                                  \
} while (0)


#define _FILL_DOUBLE_PARAM(arg) do {                                                           \
    if (strcmp(#arg, long_options[option_index].name) == 0) {                                  \
        if (sscanf(optarg, "%lf", &prms. arg) != 1) {                                          \
            ERR_MSG("Wrong value provided for --%s", long_options[option_index].name);         \
            *error = true;                                                                     \
            return prms;                                                                       \
        }                                                                                      \
    }                                                                                          \
} while (0)


struct options options_get_default()
{
    struct options prms = {
            .out_pdb = "out.pdb",
            .out_json = "out.json",
            .out_prefix = NULL,
            ._out_dyn = false,

            .print_step = false,
            .print_stage = true,
            .print_noe_matrix = true,

            .separate = false,
            .rec_natoms = 0,
            .lig_natoms = 0,
            .num_models = 0,
            .ag_list = NULL,

            .psf = NULL,
            .prm = NULL,
            .rtf = NULL,
            .pdb = NULL,
            .json = NULL,

            .rec_psf = NULL,
            .rec_prm = NULL,
            .rec_rtf = NULL,
            .rec_pdb = NULL,
            .rec_json = NULL,

            .lig_psf = NULL,
            .lig_prm = NULL,
            .lig_rtf = NULL,
            .lig_pdb = NULL,
            .lig_json = NULL,

            .fixed_pdb = NULL,

            .pair_springs_txt = NULL,
            .point_springs_txt = NULL,

            .noe_json = NULL,

            .density_json = NULL,

            .setup_json = NULL,
            .setup_json_root = NULL,

            .nsteps = 1000,

            .bonds = 1,
            .angles = 1,
            .dihedrals = 1,
            .impropers = 1,
            .vdw = 1,
            .vdw03 = 1,
            .eleng = 1,
            .elengs03 = 1,
            .ace = 0,
            .gbsa = 0,

            .tol = 5e-4,
            .nbcut = 13.0,
            .ace_efac = 0.5,
            .scale_vdw_s03 = 1.0,
            .scale_coul_s03 = 0.8333333,
            .eeps = 80.0,
            .gbcut = 25.0,

            .verbosity = DEBUG,
            .fix_receptor = 0,
            .fix_ligand = 0,
            .score_only = 0,
            .pull_ligand_away = 0,
            .help = 0,

            .num_threads = 0
    };

    return prms;
}


void options_free(struct options opts)
{
    if (opts.setup_json_root) {
        json_decref(opts.setup_json_root);
    }
    if (opts.out_prefix != NULL) {
        if (opts.out_pdb && opts._out_dyn) {
            free(opts.out_pdb);
        }
        if (opts.out_json && opts._out_dyn) {
            free(opts.out_json);
        }
    }
}


static bool _fill_prms_from_json(struct options* opts, const json_t* root)
{
    if (!json_is_object(root)) {
        return false;
    }

    json_t* dict = json_object_get(root, "options");
    if (!dict) {
        return true;
    }

    if (!json_is_object(dict)) {
        ERR_MSG("Key 'options' must point to a dictionary");
        return false;
    }

    json_error_t error;

    int code = json_unpack_ex(
            dict, &error, JSON_STRICT,

            "{s?i, s?i, s?i "
            " s?b, s?b, s?b, s?b, s?b, s?b, s?b, s?b, s?b, s?b, s?b, s?b, s?b, s?b, s?b, s?b, s?b "
            " s?s, s?s, s?s, s?s, s?s, s?s, s?s, s?s, s?s, s?s, s?s, s?s, s?s, s?s, "
            " s?s, s?s, s?s, s?s, s?s, s?s, s?s, s?s, "
            " s?f, s?f, s?f, s?f, s?f, s?f, s?f}",

            // integer options
            "nsteps", &opts->nsteps,
            "verbosity", &opts->verbosity,
            "num_threads", &opts->num_threads,

            // binary options
            "bonds", &opts->bonds,
            "angles", &opts->angles,
            "dihedrals", &opts->dihedrals,
            "impropers", &opts->impropers,
            "vdw", &opts->vdw,
            "vdw03", &opts->vdw03,
            "eleng", &opts->eleng,
            "elengs03", &opts->elengs03,
            "ace", &opts->ace,
            "gbsa", &opts->gbsa,
            "fix_receptor", &opts->fix_receptor,
            "fix_ligand", &opts->fix_ligand,
            "score_only", &opts->score_only,
            "print_step", &opts->print_step,
            "print_stage", &opts->print_stage,
            "print_noe_matrix", &opts->print_noe_matrix,
            "pull_ligand_away", &opts->pull_ligand_away,

            // char options
            "out_pdb", &opts->out_pdb,
            "out_json", &opts->out_json,
            "out_prefix", &opts->out_prefix,
            "psf", &opts->psf,
            "prm", &opts->prm,
            "rtf", &opts->rtf,
            "pdb", &opts->pdb,
            "json", &opts->json,
            "rec_psf", &opts->rec_psf,
            "rec_prm", &opts->rec_prm,
            "rec_rtf", &opts->rec_rtf,
            "rec_pdb", &opts->rec_pdb,
            "rec_json", &opts->rec_json,
            "lig_psf", &opts->lig_psf,
            "lig_prm", &opts->lig_prm,
            "lig_rtf", &opts->lig_rtf,
            "lig_pdb", &opts->lig_pdb,
            "lig_json", &opts->lig_json,
            "fixed_pdb", &opts->fixed_pdb,
            "pair_springs_txt", &opts->pair_springs_txt,
            "point_springs_txt", &opts->point_springs_txt,
            "noe_json", &opts->noe_json,
            "density_json", &opts->density_json,

            // float options
            "tol", &opts->tol,
            "nbcut", &opts->nbcut,
            "ace_efac", &opts->ace_efac,
            "scale_vdw_s03", &opts->scale_vdw_s03,
            "scale_coul_s03", &opts->scale_coul_s03,
            "eeps", &opts->eeps,
            "gbcut", &opts->gbcut
    );

    if (code != 0) {
        JSON_ERR_MSG(error, "Couldn't parse setup from json");
        return false;
    }

    return true;
}


static size_t _line_length(const char* s)
{
    size_t size = 0;
    while (1) {
        if (s[size++] == '\0') {
            return size;
        }
    }
}


static bool _check_flags_and_fill_from_json(struct options *opts)
{
    bool full = false;
    bool rec_sep = false;
    bool lig_sep = false;

    VERBOSITY = opts->verbosity >= 0 ? opts->verbosity : 0;

    // Unpack setup json first and fill the global options if there are any
    if (opts->setup_json) {
        json_t* setup = read_json_file(opts->setup_json);
        if (!setup) {
            return false;
        }

        if (!_fill_prms_from_json(opts, setup)) {
            json_decref(setup);
            return false;
        }
        opts->setup_json_root = setup;

        VERBOSITY = opts->verbosity >= 0 ? opts->verbosity : 0;
    }

    if (opts->num_threads < 0) {
        ERR_MSG("Number of threads can't be negative");
        return false;
    }

    if (opts->gbsa && opts->ace) {
        WRN_MSG("You're using GBSA and ACE at the same time");
    }

    if (opts->json || opts->pdb || opts->psf || opts->prm || opts->rtf) {
        full = true;
        opts->separate = false;

        if (!(opts->json || (opts->pdb && opts->psf && opts->prm && opts->rtf))) {
            ERR_MSG("Json and/or {pdb, psf, prm and rtf} must be provided");
            return false;
        }

        if (opts->fix_receptor) {
            ERR_MSG("Can't fix the receptor when using single file mode");
            return false;
        }

        if (opts->fix_ligand) {
            ERR_MSG("Can't fix the ligand when using single file mode");
            return false;
        }
    }

    if (opts->rec_pdb || opts->rec_psf || opts->rec_prm || opts->rec_rtf || opts->rec_json) {
        if (full) {
            ERR_MSG("You can't provide options for rec/lig mode and single file mode at the same time");
            return false;
        }

        if (!(opts->rec_json || (opts->rec_pdb && opts->rec_psf && opts->rec_prm && opts->rec_rtf))) {
            ERR_MSG("Json and/or pdb, psf, prm and rtf must be provided for receptor");
            return false;
        }

        rec_sep = true;

        if (!(opts->lig_json || (opts->lig_pdb && opts->lig_psf && opts->lig_prm && opts->lig_rtf))) {
            ERR_MSG("Json and/or pdb, psf, prm and rtf must be provided for ligand");
            return false;
        }

        lig_sep = true;
        opts->separate = true;
    }

    if (!(full || (rec_sep && lig_sep))) {
        ERR_MSG("The molecule wasn't provided");
        return false;
    }

    if (opts->nsteps < 1) {
        ERR_MSG("Number of steps must be a positive number");
        return false;
    }

    if ((!opts->separate) && opts->pull_ligand_away) {
        ERR_MSG("Option 'pull_ligand_away' can be provided only in rec/lig mode");
        return false;
    }

    //if (opts->out_prefix && (opts->out_pdb || opts->out_json)) {
    //	ERR_MSG("Flag out-prefix cannot be combined with out-pdb or out-json");
    //	return false;
    //}
    if (opts->out_prefix != NULL) {
        // Fill out_pdb and out_json if out_prefix is specified. Static arrays are replaced with
        // dynamic ones, so they need to be freed in the end
        size_t out_len = _line_length(opts->out_prefix);
        opts->out_pdb  = calloc(out_len + 4, sizeof(char));
        opts->out_json = calloc(out_len + 5, sizeof(char));
        memcpy(opts->out_pdb,  opts->out_prefix, out_len * sizeof(char));
        memcpy(opts->out_json, opts->out_prefix, out_len * sizeof(char));
        memcpy(opts->out_pdb + out_len - 1,  ".pdb", 5 * sizeof(char));
        memcpy(opts->out_json + out_len - 1,  ".json", 6 * sizeof(char));
        opts->_out_dyn = true;
    }

#ifndef NOE
    if (opts->noe_json) {
        ERR_MSG("Rebuild NRGmin with -DNOE=ON to use NOE spectrum fitting");
        return false;
    }
#endif

    return true;
}


struct options options_populate_from_argv(const int argc, char *const *argv, bool *error)
{
    struct options prms = options_get_default();

    struct option long_options[] =
            {
                    {"out_pdb",              required_argument, 0,                 0},
                    {"out_json",             required_argument, 0,                 0},
                    {"out_prefix",           required_argument, 0,                 0},
                    {"verbosity",            required_argument, 0,                 0},
                    {"num_threads",          required_argument, 0,                 0},

                    {"print_step",           no_argument,       &prms.print_step,  1},
                    {"print_stage",          no_argument,       &prms.print_stage, 1},
                    {"print_noe_matrix",     no_argument,  &prms.print_noe_matrix, 1},

                    {"psf",                  required_argument, 0,                 0},
                    {"prm",                  required_argument, 0,                 0},
                    {"rtf",                  required_argument, 0,                 0},
                    {"pdb",                  required_argument, 0,                 0},
                    {"json",                 required_argument, 0,                 0},

                    {"rec_psf",              required_argument, 0,                 0},
                    {"rec_prm",              required_argument, 0,                 0},
                    {"rec_rtf",              required_argument, 0,                 0},
                    {"rec_pdb",              required_argument, 0,                 0},
                    {"rec_json",             required_argument, 0,                 0},

                    {"lig_psf",              required_argument, 0,                 0},
                    {"lig_prm",              required_argument, 0,                 0},
                    {"lig_rtf",              required_argument, 0,                 0},
                    {"lig_pdb",              required_argument, 0,                 0},
                    {"lig_json",             required_argument, 0,                 0},

                    {"fixed_pdb",            required_argument, 0,                 0},

                    {"pair_springs_txt",     required_argument, 0,                 0},
                    {"point_springs_txt",    required_argument, 0,                 0},

                    {"noe_txt",              required_argument, 0,                 0},
                    {"noe_json",             required_argument, 0,                 0},

                    {"density_json",         required_argument, 0,                 0},

                    {"setup_json",           required_argument, 0,                 0},

                    {"nsteps",               required_argument, 0,                 0},

                    {"tol",                  required_argument, 0,                 0},
                    {"nbcut",                required_argument, 0,                 0},
                    {"ace_efac",             required_argument, 0,                 0},
                    {"scale_vdw_s03",        required_argument, 0,                 0},
                    {"scale_coul_s03",       required_argument, 0,                 0},
                    {"eeps",                 required_argument, 0,                 0},
                    {"gbcut",                required_argument, 0,                 0},

                    {"bonds_on",             no_argument,  &prms.bonds,            1},
                    {"bonds_off",            no_argument,  &prms.bonds,            0},
                    {"angles_on",            no_argument,  &prms.angles,           1},
                    {"angles_off",           no_argument,  &prms.angles,           0},
                    {"dihedrals_on",         no_argument,  &prms.dihedrals,        1},
                    {"dihedrals_off",        no_argument,  &prms.dihedrals,        0},
                    {"impropers_on",         no_argument,  &prms.impropers,        1},
                    {"impropers_off",        no_argument,  &prms.impropers,        0},
                    {"vdw_on",               no_argument,  &prms.vdw,              1},
                    {"vdw_off",              no_argument,  &prms.vdw,              0},
                    {"vdw03_on",             no_argument,  &prms.vdw03,            1},
                    {"vdw03_off",            no_argument,  &prms.vdw03,            0},
                    {"eleng_on",             no_argument,  &prms.eleng,            1},
                    {"eleng_off",            no_argument,  &prms.eleng,            0},
                    {"elengs03_on",          no_argument,  &prms.elengs03,         1},
                    {"elengs03_off",         no_argument,  &prms.elengs03,         0},
                    {"gbsa_on",              no_argument,  &prms.gbsa,             1},
                    {"gbsa_off",             no_argument,  &prms.gbsa,             0},
                    {"ace_on",               no_argument,  &prms.ace,              1},
                    {"ace_off",              no_argument,  &prms.ace,              0},

                    {"fix_receptor",         no_argument,  &prms.fix_receptor,     1},
                    {"fix_ligand",           no_argument,  &prms.fix_ligand,       1},
                    {"score_only",           no_argument,  &prms.score_only,       1},
                    {"pull_ligand_away",     no_argument,  &prms.pull_ligand_away, 1},
                    {"help",                 no_argument,  0,                    'h'},

                    {0,                      0,            0,                      0}
            };

    int option_index = 0;
    int opt;
    while (1) {
        opt = getopt_long_only(argc, argv, "h", long_options, &option_index);

        if (opt == -1) {
            break;
        }

        switch (opt) {
            case 0:
                break;

            case 'h':
                *error = false;
                prms.help = true;
                return prms;

            case '?':
                *error = true;
                ERR_MSG("Unrecognized option encountered");
                return prms;

            default:
                *error = true;
                return prms;
        }

        _FILL_PARAM(prms.out_pdb, optarg);
        _FILL_PARAM(prms.out_json, optarg);
        _FILL_PARAM(prms.out_prefix, optarg);
        _FILL_PARAM(prms.psf, optarg);
        _FILL_PARAM(prms.prm, optarg);
        _FILL_PARAM(prms.rtf, optarg);
        _FILL_PARAM(prms.pdb, optarg);
        _FILL_PARAM(prms.json, optarg);
        _FILL_PARAM(prms.rec_psf, optarg);
        _FILL_PARAM(prms.rec_prm, optarg);
        _FILL_PARAM(prms.rec_rtf, optarg);
        _FILL_PARAM(prms.rec_pdb, optarg);
        _FILL_PARAM(prms.rec_json, optarg);
        _FILL_PARAM(prms.lig_psf, optarg);
        _FILL_PARAM(prms.lig_prm, optarg);
        _FILL_PARAM(prms.lig_rtf, optarg);
        _FILL_PARAM(prms.lig_pdb, optarg);
        _FILL_PARAM(prms.lig_json, optarg);
        _FILL_PARAM(prms.fixed_pdb, optarg);
        _FILL_PARAM(prms.pair_springs_txt, optarg);
        _FILL_PARAM(prms.point_springs_txt, optarg);
        _FILL_PARAM(prms.noe_json, optarg);
        _FILL_PARAM(prms.density_json, optarg);
        _FILL_PARAM(prms.setup_json, optarg);

        if (strcmp("nsteps", long_options[option_index].name) == 0) {
            if (sscanf(optarg, "%i", &prms.nsteps) != 1) {
                ERR_MSG("Wrong value provided for --%s", long_options[option_index].name);
                *error = true;
                return prms;
            }
        }
        if (strcmp("verbosity", long_options[option_index].name) == 0) {
            if (sscanf(optarg, "%i", &prms.verbosity) != 1) {
                ERR_MSG("Wrong value provided for --%s", long_options[option_index].name);
                *error = true;
                return prms;
            }
        }
        if (strcmp("num_threads", long_options[option_index].name) == 0) {
            if (sscanf(optarg, "%i", &prms.num_threads) != 1) {
                ERR_MSG("Wrong value provided for --%s", long_options[option_index].name);
                *error = true;
                return prms;
            }
        }

        _FILL_DOUBLE_PARAM(tol);
        _FILL_DOUBLE_PARAM(nbcut);
        _FILL_DOUBLE_PARAM(ace_efac);
        _FILL_DOUBLE_PARAM(scale_vdw_s03);
        _FILL_DOUBLE_PARAM(scale_coul_s03);
        _FILL_DOUBLE_PARAM(eeps);
        _FILL_DOUBLE_PARAM(gbcut);
    }

    if (!_check_flags_and_fill_from_json(&prms)) {
        *error = true;
        return prms;
    }

    *error = false;
    return prms;
}


void usage_message(char *const *argv) {
    fprintf(stderr, "\nUsage %s [ options ]\n\n", argv[0]);
    fprintf(stderr, "@USAGE_TEXT@\n\n");
}
